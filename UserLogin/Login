import tkinter as tk
from tkinter import messagebox
import json, os, re

USER_FILE = "users.json"

# ===== Helper functions =====
def load_users():
    if os.path.exists(USER_FILE):
        with open(USER_FILE, "r") as f:
            return json.load(f)
    return {}

def save_users(users):
    with open(USER_FILE, "w") as f:
        json.dump(users, f, indent=4)

# Password rules
def password_requirements(password):
    rules = {
        "Length (≥ 8 chars)": len(password) >= 8,
        "At least 1 uppercase": bool(re.search(r"[A-Z]", password)),
        "At least 1 lowercase": bool(re.search(r"[a-z]", password)),
        "At least 1 digit": bool(re.search(r"\d", password)),
        "At least 1 special char": bool(re.search(r"[!@#$%^&*(),.?\":{}|<>]", password))
    }
    return rules

# Credit card validation (Luhn Algorithm)
def validate_credit_card(number: str) -> bool:
    number = number.replace(" ", "")
    if not number.isdigit() or len(number) < 13 or len(number) > 19:
        return False
    total = 0
    reverse_digits = number[::-1]
    for i, digit in enumerate(reverse_digits):
        n = int(digit)
        if i % 2 == 1:  # Double every second digit
            n *= 2
            if n > 9:
                n -= 9
        total += n
    return total % 10 == 0

# ===== Main App Class =====
class FuelPaymentApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Smart Rechargeable Fuel Payment System")
        self.root.geometry("580x650")
        self.root.configure(bg="#3E1E68")  # Deep Purple background

        self.users = load_users()
        self.current_user = None

        # Apply style
        self.btn_style = {"bg": "#6A0DAD", "fg": "white", "font": ("Arial", 11, "bold"),
                          "activebackground": "#8A2BE2", "activeforeground": "white", "relief": "flat", "width": 25}
        self.entry_style = {"bg": "#f3e6ff", "fg": "#2c003e", "insertbackground": "#6A0DAD",
                            "relief": "flat", "font": ("Arial", 11)}

        self.show_main_menu()

    # ----- Main Menu -----
    def show_main_menu(self):
        self.clear_frame()
        tk.Label(self.root, text="Welcome to Smart Fuel Payment System",
                 font=("Arial", 16, "bold"), bg="#3E1E68", fg="white").pack(pady=30)

        tk.Button(self.root, text="Login", command=self.show_login, **self.btn_style).pack(pady=12)
        tk.Button(self.root, text="Register", command=self.show_register, **self.btn_style).pack(pady=12)
        tk.Button(self.root, text="Exit", command=self.root.quit, **self.btn_style).pack(pady=12)

    # ----- Register -----
    def show_register(self):
        self.clear_frame()
        tk.Label(self.root, text="Register New Account", font=("Arial", 14, "bold"),
                 bg="#3E1E68", fg="white").pack(pady=15)

        # Username
        tk.Label(self.root, text="Username", bg="#3E1E68", fg="white").pack()
        username_entry = tk.Entry(self.root, **self.entry_style)
        username_entry.pack()

        # Password
        tk.Label(self.root, text="Password", bg="#3E1E68", fg="white").pack()
        password_entry = tk.Entry(self.root, show="*", **self.entry_style)
        password_entry.pack()

        # Confirm Password
        tk.Label(self.root, text="Confirm Password", bg="#3E1E68", fg="white").pack()
        confirm_entry = tk.Entry(self.root, show="*", **self.entry_style)
        confirm_entry.pack()

        # Password Criteria
        criteria_labels = {}
        for rule in [
            "Length (≥ 8 chars)",
            "At least 1 uppercase",
            "At least 1 lowercase",
            "At least 1 digit",
            "At least 1 special char"
        ]:
            lbl = tk.Label(self.root, text=f"❌ {rule}", fg="red", bg="#3E1E68", anchor="w")
            lbl.pack(fill="x", padx=50)
            criteria_labels[rule] = lbl

        def update_criteria(event=None):
            rules = password_requirements(password_entry.get())
            for rule, valid in rules.items():
                if valid:
                    criteria_labels[rule].config(text=f"✅ {rule}", fg="lightgreen")
                else:
                    criteria_labels[rule].config(text=f"❌ {rule}", fg="red")

        password_entry.bind("<KeyRelease>", update_criteria)

        # Credit card
        tk.Label(self.root, text="Credit Card Number (Swipe/Type)", bg="#3E1E68", fg="white").pack()
        card_entry = tk.Entry(self.root, **self.entry_style)
        card_entry.pack()

        # Validation label
        card_status = tk.Label(self.root, text="❌ Invalid card", fg="red", bg="#3E1E68")
        card_status.pack()

        def check_card(event=None):
            card_number = card_entry.get().strip()
            if validate_credit_card(card_number):
                card_status.config(text="✅ Valid card", fg="lightgreen")
            else:
                card_status.config(text="❌ Invalid card", fg="red")

        card_entry.bind("<KeyRelease>", check_card)

        # Initial Balance
        tk.Label(self.root, text="Initial Balance (CFA)", bg="#3E1E68", fg="white").pack()
        balance_entry = tk.Entry(self.root, **self.entry_style)
        balance_entry.pack()

        def register_user():
            username = username_entry.get().strip()
            password = password_entry.get().strip()
            confirm = confirm_entry.get().strip()
            card = card_entry.get().strip()
            balance = balance_entry.get().strip()

            if username in self.users:
                messagebox.showerror("Error", "Username already exists!")
                return
            if not username or not password or not confirm or not card or not balance:
                messagebox.showerror("Error", "All fields are required!")
                return
            if not all(password_requirements(password).values()):
                messagebox.showerror("Weak Password", "Password does not meet all requirements!")
                return
            if password != confirm:
                messagebox.showerror("Error", "Passwords do not match!")
                return
            if not validate_credit_card(card):
                messagebox.showerror("Error", "Invalid credit card number!")
                return
            if not balance.isdigit():
                messagebox.showerror("Error", "Balance must be a number!")
                return

            self.users[username] = {
                "password": password,
                "credit_card": card,
                "balance": float(balance)
            }
            save_users(self.users)

            messagebox.showinfo("Success", "Account registered successfully!")
            self.show_main_menu()

        tk.Button(self.root, text="Register", command=register_user, **self.btn_style).pack(pady=12)
        tk.Button(self.root, text="Back", command=self.show_main_menu, **self.btn_style).pack(pady=5)

    # ----- Login -----
    def show_login(self):
        self.clear_frame()
        tk.Label(self.root, text="Login", font=("Arial", 14, "bold"),
                 bg="#3E1E68", fg="white").pack(pady=15)

        tk.Label(self.root, text="Username", bg="#3E1E68", fg="white").pack()
        username_entry = tk.Entry(self.root, **self.entry_style)
        username_entry.pack()

        tk.Label(self.root, text="Password", bg="#3E1E68", fg="white").pack()
        password_entry = tk.Entry(self.root, show="*", **self.entry_style)
        password_entry.pack()

        def login_user():
            username = username_entry.get().strip()
            password = password_entry.get().strip()
            if username in self.users and self.users[username]["password"] == password:
                self.current_user = username
                messagebox.showinfo("Success", f"Welcome, {username}!")
                self.show_dashboard()
            else:
                messagebox.showerror("Error", "Invalid username or password!")

        tk.Button(self.root, text="Login", command=login_user, **self.btn_style).pack(pady=12)
        tk.Button(self.root, text="Back", command=self.show_main_menu, **self.btn_style).pack(pady=5)

    # ----- Dashboard -----
    def show_dashboard(self):
        self.clear_frame()
        tk.Label(self.root, text=f"Dashboard - {self.current_user}",
                 font=("Arial", 14, "bold"), bg="#3E1E68", fg="white").pack(pady=15)

        balance = self.users[self.current_user]["balance"]
        tk.Label(self.root, text=f"Balance: {balance} CFA", bg="#3E1E68", fg="lightyellow").pack(pady=10)

        tk.Button(self.root, text="Recharge", command=lambda: messagebox.showinfo("Recharge", "Recharge Module"), **self.btn_style).pack(pady=8)
        tk.Button(self.root, text="Buy Fuel", command=lambda: messagebox.showinfo("Fuel", "Fuel Payment Module"), **self.btn_style).pack(pady=8)
        tk.Button(self.root, text="Admin Panel", command=lambda: messagebox.showinfo("Admin", "Admin Module"), **self.btn_style).pack(pady=8)

        tk.Button(self.root, text="Logout", command=self.show_main_menu, **self.btn_style).pack(pady=20)

    # ----- Clear frame -----
    def clear_frame(self):
        for widget in self.root.winfo_children():
            widget.destroy()


# ===== Run the App =====
if __name__ == "__main__":
    root = tk.Tk()
    app = FuelPaymentApp(root)
    root.mainloop()